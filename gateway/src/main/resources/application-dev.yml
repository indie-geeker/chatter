spring:
  banner:
    location: classpath:banner/banner.txt
  data:
    redis:
      host: 127.0.0.1
      port: 6379
      database: 0
      password: root
  application:
    name: gateway

  cloud:
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848
    gateway:
      enabled: true
      discovery:
        locator:
          enabled: true   # 动态路由，从注册中心根据微服务名称获取目标节点地址
      routes:             # 配置路由匹配规则
        - id: authRoute
          uri: lb://auth-service    # lb 负载均衡，动态寻址;需要添加 loadbalancer 依赖
          predicates:
            - Path=/auth/**,/authTest/**         # 可配置多个路径: Path=/a/**,/b/**
        - id: fileRoute
          uri: lb://file-service
          predicates:
            - Path=/file/**
        - id: mainRoute
          uri: lb://main-service
          predicates:
            - Path=/main/**
      globalcors:     # 解决浏览器跨域问题
        cors-configurations:
          '[/**]':
            allowed-origin-patterns: "*"
            allowed-headers: "*"
            allowed-methods: "*"
            allow-credentials: true


server:
  port: 18000
  tomcat:
    uri-encoding: UTF-8
    max-swallow-size: 2MB


blackIp:
  continueCounts: 3   # ip连续请求的次数
  timeInterval: 5    # ip判断的时间间隔，单位：秒
  limitTimes: 20      # 黑名单ip限制的时间，单位：秒

# 安全配置 - 排除路径管理
security:
  exclude:
    # 可在配置文件中动态添加排除路径
    paths:
      # 开发环境特殊排除路径
      - "/dev/**"
      - "/debug/**"
      # 临时开放的接口（可随时调整）
      - "/temp/**"
      # 第三方回调接口
      - "/callback/**"
      - "/webhook/**"
      # 特定业务的公开接口
      - "/public/**"
      - "/open/**"

logging:
  level:
    root: info
    org.springframework.data.redis: info  # Redis 相关日志
    com.indiegeeker.filter.SecurityFilter: debug  # 安全过滤器日志